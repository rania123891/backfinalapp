// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetService.Data.Context;

#nullable disable

namespace ProjetService.Data.Migrations
{
    [DbContext(typeof(ProjetDbContext))]
    [Migration("20250609142803_InitialCreateWithEquippe")]
    partial class InitialCreateWithEquippe
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetService.Domain.Models.Commentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("TacheId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TacheId");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Equipe", b =>
                {
                    b.Property<int>("IdEquipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEquipe"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("IdEquipe");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.MembreEquipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("MembresEquipe");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Planification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan>("HeureDebut")
                        .HasColumnType("time")
                        .HasColumnName("heure_debut");

                    b.Property<TimeSpan>("HeureFin")
                        .HasColumnType("time")
                        .HasColumnName("heure_fin");

                    b.Property<int>("ListeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("liste_id");

                    b.Property<int>("ProjetId")
                        .HasColumnType("int")
                        .HasColumnName("projet_id");

                    b.Property<int>("TacheId")
                        .HasColumnType("int")
                        .HasColumnName("tache_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_Planifications_Date");

                    b.HasIndex("ProjetId");

                    b.HasIndex("TacheId");

                    b.HasIndex("Date", "HeureDebut")
                        .HasDatabaseName("IX_Planifications_Date_HeureDebut");

                    b.ToTable("Planifications");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Projet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateurId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEcheance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duree")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projets");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.ProjetService.Domain.Models.ProjetEquipe", b =>
                {
                    b.Property<int>("ProjetId")
                        .HasColumnType("int");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.HasKey("ProjetId", "EquipeId");

                    b.HasIndex("EquipeId");

                    b.ToTable("ProjetEquipe");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Tache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int>("Priorite")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Commentaire", b =>
                {
                    b.HasOne("ProjetService.Domain.Models.Tache", "Tache")
                        .WithMany("Commentaires")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.MembreEquipe", b =>
                {
                    b.HasOne("ProjetService.Domain.Models.Equipe", "Equipe")
                        .WithMany("MembresEquipe")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Planification", b =>
                {
                    b.HasOne("ProjetService.Domain.Models.Projet", "Projet")
                        .WithMany("Planifications")
                        .HasForeignKey("ProjetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetService.Domain.Models.Tache", "Tache")
                        .WithMany("Planifications")
                        .HasForeignKey("TacheId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Projet");

                    b.Navigation("Tache");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.ProjetService.Domain.Models.ProjetEquipe", b =>
                {
                    b.HasOne("ProjetService.Domain.Models.Equipe", "Equipe")
                        .WithMany("ProjetsEquipes")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetService.Domain.Models.Projet", "Projet")
                        .WithMany("ProjetsEquipes")
                        .HasForeignKey("ProjetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Projet");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Tache", b =>
                {
                    b.HasOne("ProjetService.Domain.Models.Equipe", "Equipe")
                        .WithMany("Taches")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Equipe", b =>
                {
                    b.Navigation("MembresEquipe");

                    b.Navigation("ProjetsEquipes");

                    b.Navigation("Taches");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Projet", b =>
                {
                    b.Navigation("Planifications");

                    b.Navigation("ProjetsEquipes");
                });

            modelBuilder.Entity("ProjetService.Domain.Models.Tache", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("Planifications");
                });
#pragma warning restore 612, 618
        }
    }
}
